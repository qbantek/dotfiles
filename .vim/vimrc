set encoding=utf-8

" Leader
let mapleader = " "
set ttyfast       " Indicate fast terminal conn for faster redraw
set ttymouse=xterm2 " Indicate terminal type for mouse codes
set ttyscroll=3   " Speedup scrolling
set tabstop=2     " 1 tab = 2 spaces
set shiftwidth=2  " text is indented 2 columns with re-indent operations
set softtabstop=2 " 1 tab = 2 spaces (insert mode)
set smarttab      " Uses shiftwidth instead of tabstop at start of lines
set expandtab     " Replaces tab with spaces
set hlsearch      " Highlight search results
set incsearch     " Show search results as I type
set nojoinspaces  " Only one space after .
set ignorecase    " Search case insensitive...
set smartcase     " ... but not it begins with upper case
set nowrap
set laststatus=2  " Always display the status line
set autoread      " Automatically read changed files
set autowrite     " Automatically :write before running commands
set showcmd       " Show me what I'm typing
set backspace=indent,eol,start
set nobackup
set nowritebackup
set noswapfile
set modelines=0   " Disable modelines as a security precaution
set nomodeline    " Disable modelines as a security precaution
set number
set relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END
set ruler
set textwidth=80 " Make it obvious where 80 characters is
set colorcolumn=+1
highlight ColorColumn ctermbg=0 guibg=lightgrey
" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
syntax enable
syntax on
" config persistent undo
if has("persistent_undo")
  silent !mkdir ~/.vim > /dev/null 2>&1
  silent !mkdir ~/.vim/undo > /dev/null 2>&1
  set undodir=$HOME/.vim/undo
  set undofile
endif


" -----------------------------
"         PLUGINS
" -----------------------------

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" Color scheme
if has('gui_running')
    set background=light
else
    set background=dark
endif
colorscheme solarized

" vim-rspec
let g:rspec_command = "Dispatch rspec {spec}"
augroup rspec
  autocmd!
  autocmd FileType ruby map <Leader>t :call RunCurrentSpecFile()<CR>
  autocmd FileType ruby map <Leader>s :call RunNearestSpec()<CR>
  autocmd FileType ruby map <Leader>l :call RunLastSpec()<CR>
  autocmd FileType ruby map <Leader>a :call RunAllSpecs()<CR>
augroup END

" vim-rubocop
let g:vimrubocop_keymap = 0
augroup rubocop
  autocmd!
  autocmd FileType ruby map <Leader>ra :RuboCop -a<CR>
augroup END

" supertab
let g:SuperTabDefaultCompletionType = '<C-n>'

" YouCompleteMe
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_clangd_binary_path = "/usr/lib/llvm-10/bin/clangd"

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"

" Map Ctrl-n to NERDTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
augroup NERDTree
  autocmd!
  autocmd BufEnter NERD_tree_* nmap  d<CR> <CR> :NERDTreeToggle <CR>
  autocmd BufLeave NERD_tree_* unmap d<CR>
augroup END  

" vim-markdown-preview
let vim_markdown_preview_toggle=1
let vim_markdown_preview_github=1
let vim_markdown_preview_hotkey='<C-m>'
augroup markdownSpell
  autocmd!
  autocmd FileType markdown setlocal spell spelllang=en_us
  autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us
augroup END

" vim-go
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
augroup go
  autocmd!
  autocmd FileType go nmap <leader>r  <Plug>(go-run)
  autocmd FileType go nmap <leader>t  <Plug>(go-test)
  autocmd FileType go nmap <leader>c  <Plug>(go-coverage-toggle)
  autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
augroup END

" build_go_files is a custom function that builds or compiles the test file.
" It calls :GoBuild if its a Go file, or :GoTestCompile if it's a test file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" undotree
nnoremap <leader>u :UndotreeToggle<CR>
let g:gundo_prefer_python3 = 1


" -----------------------------
"         MOVEMENT
" -----------------------------

" Map jk & kj to Esc
:inoremap jk <Esc>
:inoremap kj <Esc>

" Disable arrow movement, re-size splits instead.
nnoremap <Up>    :resize +2<CR>
nnoremap <Down>  :resize -2<CR>
nnoremap <Left>  :vertical resize +2<CR>
nnoremap <Right> :vertical resize -2<CR>

" disable tmux navigation when zoomed in
let g:tmux_navigator_disable_when_zoomed = 1


" -----------------------------
"         COPY/PASTE
" -----------------------------

if has("clipboard")
  " CTRL-X is Cut
  vnoremap <C-X> "+x
  " CTRL-C is Copy
  vnoremap <C-C> "+y
  " CTRL-V is Paste
  map <C-V> "+gP
  cmap <C-V> <C-R>+
endif

" Automatically set paste mode when pasting in insert mode
function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction
let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()


" -----------------------------
"         SPELLING
" -----------------------------

" Correct last spelling issue
nmap <Leader>z [s1z=
" Toggle spell checking
map <leader>ss :setlocal spell!<cr>


" -----------------------------
"         SEARCHING
" -----------------------------

" Support for gem ctags
set tags=tags;
set tags+=gems.tags;

" Ignore when expanding wildcards
set wildignore=*/node_modules/*,*/tmp/*,*/.idea/*,*/.git/*

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind S to grep word under cursor
nnoremap S :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" This unsets the "last search pattern" register by hitting return 
nnoremap <silent> <CR> :nohlsearch<CR><CR>

" -----------------------------
"         COMMIT MESSAGES
" -----------------------------
augroup gitcommit
  autocmd!
  autocmd Filetype gitcommit setlocal spell textwidth=72
augroup END
